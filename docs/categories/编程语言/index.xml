<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程语言 on Witton的博客</title>
    <link>https://wittonbell.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 编程语言 on Witton的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 04 Aug 2023 10:22:20 +0800</lastBuildDate><atom:link href="https://wittonbell.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Go语言生成Excel任务表依赖图（Markdown文件mermaid图）</title>
      <link>https://wittonbell.github.io/posts/2023/2023-08-04-%E4%BD%BF%E7%94%A8Go%E8%AF%AD%E8%A8%80%E7%94%9F%E6%88%90Excel%E4%BB%BB%E5%8A%A1%E8%A1%A8%E4%BE%9D%E8%B5%96%E5%9B%BEMarkdown%E6%96%87%E4%BB%B6mermaid%E5%9B%BE/</link>
      <pubDate>Fri, 04 Aug 2023 10:22:20 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-08-04-%E4%BD%BF%E7%94%A8Go%E8%AF%AD%E8%A8%80%E7%94%9F%E6%88%90Excel%E4%BB%BB%E5%8A%A1%E8%A1%A8%E4%BE%9D%E8%B5%96%E5%9B%BEMarkdown%E6%96%87%E4%BB%B6mermaid%E5%9B%BE/</guid>
      <description>一、前言 在游戏中，任务是非常常见的玩法，可能会有主线任务，支线任务以及其它一些类型的任务，各任务可能还会有前置任务，即需</description>
    </item>
    
    <item>
      <title>CMake自动按目录结构编译Protobuf代码</title>
      <link>https://wittonbell.github.io/posts/2023/2023-04-26-CMake%E8%87%AA%E5%8A%A8%E6%8C%89%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%BC%96%E8%AF%91Protobuf%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 26 Apr 2023 17:49:55 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-04-26-CMake%E8%87%AA%E5%8A%A8%E6%8C%89%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%BC%96%E8%AF%91Protobuf%E4%BB%A3%E7%A0%81/</guid>
      <description>在使用CMake构建C++项目时，如果有使用Protobuf，CMake提供了一个FindProtobuf.cmake模</description>
    </item>
    
    <item>
      <title>使用Glib中测试框架对C代码进行单元测试</title>
      <link>https://wittonbell.github.io/posts/2023/2023-04-21-%E4%BD%BF%E7%94%A8Glib%E4%B8%AD%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E5%AF%B9C%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 21 Apr 2023 18:26:27 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-04-21-%E4%BD%BF%E7%94%A8Glib%E4%B8%AD%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E5%AF%B9C%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>C++项目的测试框架比较常见的是Google的gtest（前文 CMake项目使用ctest+gtest进行单元测试有使用</description>
    </item>
    
    <item>
      <title>Go项目中添加生成时间与版本信息</title>
      <link>https://wittonbell.github.io/posts/2023/2023-03-30-Go%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%94%9F%E6%88%90%E6%97%B6%E9%97%B4%E4%B8%8E%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Thu, 30 Mar 2023 18:22:09 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-03-30-Go%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%94%9F%E6%88%90%E6%97%B6%E9%97%B4%E4%B8%8E%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/</guid>
      <description>我们在编写软件时，一般会有版本号以及生成的时间，Go编译的程序中，如何添加当时的编译时间以及版本信息？ C/C++语言，非</description>
    </item>
    
    <item>
      <title>Linux下使用CMake构建含nasm汇编的C/C&#43;&#43;项目</title>
      <link>https://wittonbell.github.io/posts/2022/2022-05-29-Linux%E4%B8%8B%E4%BD%BF%E7%94%A8CMake%E6%9E%84%E5%BB%BA%E5%90%ABnasm%E6%B1%87%E7%BC%96%E7%9A%84C_C&#43;&#43;%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sun, 29 May 2022 00:24:09 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2022/2022-05-29-Linux%E4%B8%8B%E4%BD%BF%E7%94%A8CMake%E6%9E%84%E5%BB%BA%E5%90%ABnasm%E6%B1%87%E7%BC%96%E7%9A%84C_C&#43;&#43;%E9%A1%B9%E7%9B%AE/</guid>
      <description>CMake的出现极大的方便了C/C++项目的编译管理，避免了手工写Makefile的繁琐。如果在C/C++项目中有需要使</description>
    </item>
    
    <item>
      <title>让docsify-katex支持化学公式mhchem扩展</title>
      <link>https://wittonbell.github.io/posts/2022/2022-03-16-%E8%AE%A9docsify-katex%E6%94%AF%E6%8C%81%E5%8C%96%E5%AD%A6%E5%85%AC%E5%BC%8Fmhchem%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 16 Mar 2022 16:31:39 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2022/2022-03-16-%E8%AE%A9docsify-katex%E6%94%AF%E6%8C%81%E5%8C%96%E5%AD%A6%E5%85%AC%E5%BC%8Fmhchem%E6%89%A9%E5%B1%95/</guid>
      <description>在使用docsify构建Markdown文档时，如果想要支持数学公式，可以使用docsify-katex插件，但是该插件</description>
    </item>
    
    <item>
      <title>C&#43;&#43;学习资料</title>
      <link>https://wittonbell.github.io/posts/2021/2021-10-21-C&#43;&#43;%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</link>
      <pubDate>Thu, 21 Oct 2021 10:18:04 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-10-21-C&#43;&#43;%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</guid>
      <description>本文转自： https://github.com/0voice/cpp_new_features 2021年最新整理， C++ 学习资料，含C++ 11 / 14 / 17 / 20 / 23 新特性、入门教程、推荐书籍、优质文章、学习笔记、教</description>
    </item>
    
    <item>
      <title>Go语言非main包编译为静态库并使用</title>
      <link>https://wittonbell.github.io/posts/2021/2021-07-09-Go%E8%AF%AD%E8%A8%80%E9%9D%9Emain%E5%8C%85%E7%BC%96%E8%AF%91%E4%B8%BA%E9%9D%99%E6%80%81%E5%BA%93%E5%B9%B6%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 09 Jul 2021 18:55:29 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-07-09-Go%E8%AF%AD%E8%A8%80%E9%9D%9Emain%E5%8C%85%E7%BC%96%E8%AF%91%E4%B8%BA%E9%9D%99%E6%80%81%E5%BA%93%E5%B9%B6%E4%BD%BF%E7%94%A8/</guid>
      <description>文章目录 一、环境 二、常规工程 三、将libDemo编译为静态库使用 1. 移动libDemo 2. 编译libDemo为静态库 3. 删除源</description>
    </item>
    
    <item>
      <title>C&#43;&#43;实现Go的defer功能</title>
      <link>https://wittonbell.github.io/posts/2021/2021-07-08-C&#43;&#43;%E5%AE%9E%E7%8E%B0Go%E7%9A%84defer%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Thu, 08 Jul 2021 18:38:14 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-07-08-C&#43;&#43;%E5%AE%9E%E7%8E%B0Go%E7%9A%84defer%E5%8A%9F%E8%83%BD/</guid>
      <description>在Go语言中有一个关键字：defer，它的作用就是延迟执行后面的函数，在资源释放方面特别有用，比如下面一段C/C++的示</description>
    </item>
    
    <item>
      <title>go读写网络消息</title>
      <link>https://wittonbell.github.io/posts/2021/2021-03-10-go%E8%AF%BB%E5%86%99%E7%BD%91%E7%BB%9C%E6%B6%88%E6%81%AF/</link>
      <pubDate>Wed, 10 Mar 2021 17:43:08 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-03-10-go%E8%AF%BB%E5%86%99%E7%BD%91%E7%BB%9C%E6%B6%88%E6%81%AF/</guid>
      <description>前几天项目需要写一个登录压力测试机器人对服务器进行压力测试。服务器是使用C++写的，为了快捷完成机器人，我并没有选择C+</description>
    </item>
    
    <item>
      <title>对C&#43;&#43;变长参数中的字符串进行转义</title>
      <link>https://wittonbell.github.io/posts/2021/2021-02-24-%E5%AF%B9C&#43;&#43;%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E8%A1%8C%E8%BD%AC%E4%B9%89/</link>
      <pubDate>Wed, 24 Feb 2021 16:21:28 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-02-24-%E5%AF%B9C&#43;&#43;%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E8%A1%8C%E8%BD%AC%E4%B9%89/</guid>
      <description>使用过SQL的读者应该都知道SQL存在注入的可能，即没有严格检查用户输入数据的合法性。这里不讨论SQL的注入以及防止注入</description>
    </item>
    
    <item>
      <title>C&#43;&#43;模板类成员函数使用SFINAE特性匹配智能指针</title>
      <link>https://wittonbell.github.io/posts/2021/2021-02-23-C&#43;&#43;%E6%A8%A1%E6%9D%BF%E7%B1%BB%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8SFINAE%E7%89%B9%E6%80%A7%E5%8C%B9%E9%85%8D%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Tue, 23 Feb 2021 15:01:21 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-02-23-C&#43;&#43;%E6%A8%A1%E6%9D%BF%E7%B1%BB%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8SFINAE%E7%89%B9%E6%80%A7%E5%8C%B9%E9%85%8D%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>为了讲解C++模板类成员函数如何使用SFINAE特性匹配智能指针，笔者使用最近在实际项目中的应用来进行说明。 最近在项目开</description>
    </item>
    
    <item>
      <title>使用C&#43;&#43;11模板SFINAE实现enum class与整数的比较</title>
      <link>https://wittonbell.github.io/posts/2020/2020-12-08-%E4%BD%BF%E7%94%A8C&#43;&#43;11%E6%A8%A1%E6%9D%BFSFINAE%E5%AE%9E%E7%8E%B0enum-class%E4%B8%8E%E6%95%B4%E6%95%B0%E7%9A%84%E6%AF%94%E8%BE%83/</link>
      <pubDate>Tue, 08 Dec 2020 15:18:53 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2020/2020-12-08-%E4%BD%BF%E7%94%A8C&#43;&#43;11%E6%A8%A1%E6%9D%BFSFINAE%E5%AE%9E%E7%8E%B0enum-class%E4%B8%8E%E6%95%B4%E6%95%B0%E7%9A%84%E6%AF%94%E8%BE%83/</guid>
      <description>在C++11中添加了enum class类型，与enum类型不同的是，使用enum class中的枚举值时必须加上类型限定符</description>
    </item>
    
    <item>
      <title>使用C&#43;&#43;11模板SFINAE特性重写序列化与反序列化</title>
      <link>https://wittonbell.github.io/posts/2020/2020-11-10-%E4%BD%BF%E7%94%A8C&#43;&#43;11%E6%A8%A1%E6%9D%BFSFINAE%E7%89%B9%E6%80%A7%E9%87%8D%E5%86%99%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Tue, 10 Nov 2020 17:16:18 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2020/2020-11-10-%E4%BD%BF%E7%94%A8C&#43;&#43;11%E6%A8%A1%E6%9D%BFSFINAE%E7%89%B9%E6%80%A7%E9%87%8D%E5%86%99%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>序列化与反序列化在编程中是最常见不过了，项目中原来写的序列化与反序列化是使用的普通类成员函数来写的，每一个数据类型都写了</description>
    </item>
    
    <item>
      <title>VSCode配置Erlang开发环境</title>
      <link>https://wittonbell.github.io/posts/2020/2020-08-13-VSCode%E9%85%8D%E7%BD%AEErlang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 13 Aug 2020 16:43:35 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2020/2020-08-13-VSCode%E9%85%8D%E7%BD%AEErlang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>文章目录 一、下载安装Erlang 二、安装VSCode Erlang插件 三、安装rebar3 四、测试开发环境 1. 创建工程 2. 配置</description>
    </item>
    
    <item>
      <title>VSCode下安装配置Go环境</title>
      <link>https://wittonbell.github.io/posts/2020/2020-07-07-VSCode%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEGo%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 07 Jul 2020 11:10:28 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2020/2020-07-07-VSCode%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEGo%E7%8E%AF%E5%A2%83/</guid>
      <description>文章目录 一、下载并安装Go安装包 二、VSCode安装Go相关插件 1. 安装Go插件 2. 安装其它插件 由于国内墙的原因，安装配置G</description>
    </item>
    
    <item>
      <title>使用Python实现XML文件转为Excel文件</title>
      <link>https://wittonbell.github.io/posts/2019/2019-09-02-%E4%BD%BF%E7%94%A8Python%E5%AE%9E%E7%8E%B0XML%E6%96%87%E4%BB%B6%E8%BD%AC%E4%B8%BAExcel%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 02 Sep 2019 16:21:38 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2019/2019-09-02-%E4%BD%BF%E7%94%A8Python%E5%AE%9E%E7%8E%B0XML%E6%96%87%E4%BB%B6%E8%BD%AC%E4%B8%BAExcel%E6%96%87%E4%BB%B6/</guid>
      <description>由于项目组中原来的文件使用的XML格式作为配置，扩展性很好，但是阅读起来不是很直观，编辑起来也是不很方便，特别一些规则的</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 11 std::bind函数绑定如何省略占位参数std::placeholders::_1……</title>
      <link>https://wittonbell.github.io/posts/2019/2019-08-02-C&#43;&#43;-11-stdbind%E5%87%BD%E6%95%B0%E7%BB%91%E5%AE%9A%E5%A6%82%E4%BD%95%E7%9C%81%E7%95%A5%E5%8D%A0%E4%BD%8D%E5%8F%82%E6%95%B0stdplaceholders_1/</link>
      <pubDate>Fri, 02 Aug 2019 18:32:05 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2019/2019-08-02-C&#43;&#43;-11-stdbind%E5%87%BD%E6%95%B0%E7%BB%91%E5%AE%9A%E5%A6%82%E4%BD%95%E7%9C%81%E7%95%A5%E5%8D%A0%E4%BD%8D%E5%8F%82%E6%95%B0stdplaceholders_1/</guid>
      <description>我们在使用C++的函数绑定功能时,每次都需要写一大堆的占位符,有多少个参数就要写多少个占位符,比如下面的示例代码: 1class CTest 2{</description>
    </item>
    
    <item>
      <title>在Visual Studio调试器中显示Google Protocol Buffers容器类型的值</title>
      <link>https://wittonbell.github.io/posts/2019/2019-06-24-%E5%9C%A8Visual-Studio%E8%B0%83%E8%AF%95%E5%99%A8%E4%B8%AD%E6%98%BE%E7%A4%BAGoogle-Protocol-Buffers%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC/</link>
      <pubDate>Mon, 24 Jun 2019 17:07:49 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2019/2019-06-24-%E5%9C%A8Visual-Studio%E8%B0%83%E8%AF%95%E5%99%A8%E4%B8%AD%E6%98%BE%E7%A4%BAGoogle-Protocol-Buffers%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC/</guid>
      <description>Google Protocol Buffers会生成RepeatedField和Map等容器类型，为方便在Visual Studio中进行调试，编写了</description>
    </item>
    
    <item>
      <title>CentOS python2升级到python3后的注意事项</title>
      <link>https://wittonbell.github.io/posts/2019/2019-05-26-CentOS-python2%E5%8D%87%E7%BA%A7%E5%88%B0python3%E5%90%8E%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Sun, 26 May 2019 18:27:39 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2019/2019-05-26-CentOS-python2%E5%8D%87%E7%BA%A7%E5%88%B0python3%E5%90%8E%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>由于CentOS系统默认使用的是Python2，升级到Python3后原来的一些系统软件就不可用了，需要做一些处理。 首先</description>
    </item>
    
    <item>
      <title>加快编译速度，再谈C/C&#43;&#43;预编译技术的使用</title>
      <link>https://wittonbell.github.io/posts/2019/2019-03-31-%E5%8A%A0%E5%BF%AB%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E5%86%8D%E8%B0%88C_C&#43;&#43;%E9%A2%84%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 31 Mar 2019 22:34:29 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2019/2019-03-31-%E5%8A%A0%E5%BF%AB%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6%E5%86%8D%E8%B0%88C_C&#43;&#43;%E9%A2%84%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>最近新参加的一项目是C++项目，新项目使用的原来老项目的代码来作开发，两个项目不管是Windows还是Linux都是没使</description>
    </item>
    
    <item>
      <title>使用Python爬取考勤信息</title>
      <link>https://wittonbell.github.io/posts/2018/2018-12-29-%E4%BD%BF%E7%94%A8Python%E7%88%AC%E5%8F%96%E8%80%83%E5%8B%A4%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Sat, 29 Dec 2018 11:50:40 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2018/2018-12-29-%E4%BD%BF%E7%94%A8Python%E7%88%AC%E5%8F%96%E8%80%83%E5%8B%A4%E4%BF%A1%E6%81%AF/</guid>
      <description>最近公司的加班调休审批制度有一些调整，由于公司网站上没有清楚的标明各自有多少天可以调休，所以为了清楚的知道自己还有多少天</description>
    </item>
    
    <item>
      <title>解密Cocos2D中的Lua源码</title>
      <link>https://wittonbell.github.io/posts/2018/2018-05-26-%E8%A7%A3%E5%AF%86Cocos2D%E4%B8%AD%E7%9A%84Lua%E6%BA%90%E7%A0%81/</link>
      <pubDate>Sat, 26 May 2018 11:17:39 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2018/2018-05-26-%E8%A7%A3%E5%AF%86Cocos2D%E4%B8%AD%E7%9A%84Lua%E6%BA%90%E7%A0%81/</guid>
      <description>由于没学习和使用过Cocos2D，但出于工作需要，后面将要学习与使用Cocos2D。 第一次使用修改过的Cocos的时候遇</description>
    </item>
    
    <item>
      <title>如何将ProtoBuffer生成Erlang文件</title>
      <link>https://wittonbell.github.io/posts/2017/2017-11-27-%E5%A6%82%E4%BD%95%E5%B0%86ProtoBuffer%E7%94%9F%E6%88%90Erlang%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 27 Nov 2017 19:00:36 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2017/2017-11-27-%E5%A6%82%E4%BD%95%E5%B0%86ProtoBuffer%E7%94%9F%E6%88%90Erlang%E6%96%87%E4%BB%B6/</guid>
      <description>ProtoBuffer官方提供了C++、Java、Python等语言的生成器，但不支持Erlang语言，为了让Erlan</description>
    </item>
    
    <item>
      <title>使用自己的Python函数处理Protobuf中的字符串编码</title>
      <link>https://wittonbell.github.io/posts/2016/2016-11-04-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84Python%E5%87%BD%E6%95%B0%E5%A4%84%E7%90%86Protobuf%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</link>
      <pubDate>Fri, 04 Nov 2016 19:03:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2016/2016-11-04-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84Python%E5%87%BD%E6%95%B0%E5%A4%84%E7%90%86Protobuf%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81/</guid>
      <description>我目前所在的项目是一个老项目，里面的字符串编码有点乱，数据库中有些是GB2312，有些是UTF8；代码中有些是GBK，有</description>
    </item>
    
    <item>
      <title>使用Makefile编译Erlang</title>
      <link>https://wittonbell.github.io/posts/2016/2016-01-26-%E4%BD%BF%E7%94%A8Makefile%E7%BC%96%E8%AF%91Erlang/</link>
      <pubDate>Tue, 26 Jan 2016 20:03:42 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2016/2016-01-26-%E4%BD%BF%E7%94%A8Makefile%E7%BC%96%E8%AF%91Erlang/</guid>
      <description>#配置选项，可以是DEBUG和RELEASE CONFIG ?= RELEASE #语言配置，可以是chs(简体中文)、cht(繁体中文)等等 Region ?= chs #源</description>
    </item>
    
    <item>
      <title>使用IntelliJ IDEA配置Erlang开发环境</title>
      <link>https://wittonbell.github.io/posts/2016/2016-01-20-%E4%BD%BF%E7%94%A8IntelliJ-IDEA%E9%85%8D%E7%BD%AEErlang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 20 Jan 2016 21:30:47 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2016/2016-01-20-%E4%BD%BF%E7%94%A8IntelliJ-IDEA%E9%85%8D%E7%BD%AEErlang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>Idea工具是目前我使用过的开发Erlang最好用的IDE，但其Erlang插件的官方教程太简陋，我就想自己做一个相对详</description>
    </item>
    
    <item>
      <title>erlang 开发建议</title>
      <link>https://wittonbell.github.io/posts/2013/2013-12-05-erlang-%E5%BC%80%E5%8F%91%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Thu, 05 Dec 2013 12:27:19 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2013/2013-12-05-erlang-%E5%BC%80%E5%8F%91%E5%BB%BA%E8%AE%AE/</guid>
      <description>* 确保没有任何编译警告 Erlang中String采用list实现，32位系统中，其1个字符用8个字节的空间（4个保存va</description>
    </item>
    
    <item>
      <title>将NASM汇编器集成到Visual Studio中</title>
      <link>https://wittonbell.github.io/posts/2013/2013-06-01-%E5%B0%86NASM%E6%B1%87%E7%BC%96%E5%99%A8%E9%9B%86%E6%88%90%E5%88%B0Visual-Studio%E4%B8%AD/</link>
      <pubDate>Sat, 01 Jun 2013 21:17:25 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2013/2013-06-01-%E5%B0%86NASM%E6%B1%87%E7%BC%96%E5%99%A8%E9%9B%86%E6%88%90%E5%88%B0Visual-Studio%E4%B8%AD/</guid>
      <description>之前在《 Visual Studio中使用NASM编译汇编文件》中介绍了如何将NASM汇编器集成到VS2005和VS2008中，但VS</description>
    </item>
    
    <item>
      <title>C&#43;&#43;安全方便高效地复制对象数组</title>
      <link>https://wittonbell.github.io/posts/2013/2013-05-05-C&#43;&#43;%E5%AE%89%E5%85%A8%E6%96%B9%E4%BE%BF%E9%AB%98%E6%95%88%E5%9C%B0%E5%A4%8D%E5%88%B6%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 05 May 2013 21:39:30 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2013/2013-05-05-C&#43;&#43;%E5%AE%89%E5%85%A8%E6%96%B9%E4%BE%BF%E9%AB%98%E6%95%88%E5%9C%B0%E5%A4%8D%E5%88%B6%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/</guid>
      <description>在C++中，我们经常遇到需要对一个对象数组进行复制，比如下面一个结构： 1struct STest 2{ 3 int a; 4 int b; 5 vector&amp;lt;int&amp;gt; vctInt; 6};``` 7 8 9 10 11我们定义了两</description>
    </item>
    
    <item>
      <title>关于友元函数的跨平台问题</title>
      <link>https://wittonbell.github.io/posts/2010/2010-02-03-%E5%85%B3%E4%BA%8E%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 03 Feb 2010 13:51:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2010/2010-02-03-%E5%85%B3%E4%BA%8E%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%97%AE%E9%A2%98/</guid>
      <description>今天我在项目中写了一段代码，这段代码中有两个类A和B，类A中的一个保护成员函数需要访问类B中的私有成员变量，为了简便起见</description>
    </item>
    
    <item>
      <title>关于C/C&#43;&#43;的位域</title>
      <link>https://wittonbell.github.io/posts/2010/2010-01-31-%E5%85%B3%E4%BA%8EC_C&#43;&#43;%E7%9A%84%E4%BD%8D%E5%9F%9F/</link>
      <pubDate>Sun, 31 Jan 2010 23:44:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2010/2010-01-31-%E5%85%B3%E4%BA%8EC_C&#43;&#43;%E7%9A%84%E4%BD%8D%E5%9F%9F/</guid>
      <description>在C/C++中我们有时为了节省内存占用空间，需要使用到位域，如下所示代码： struct SDummy { int A : 2; int B : 8; int C : 12; int D : 10; }; 在计算</description>
    </item>
    
    <item>
      <title>类成员函数大小问题</title>
      <link>https://wittonbell.github.io/posts/2009/2009-11-15-%E7%B1%BB%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%A4%A7%E5%B0%8F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 15 Nov 2009 20:56:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2009/2009-11-15-%E7%B1%BB%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E5%A4%A7%E5%B0%8F%E9%97%AE%E9%A2%98/</guid>
      <description>上周，我一同事，在调试我们项目的时候，发现我写的一段代码中，有一个类成员函数指针数组有大小有点怪异，便叫我过去瞧瞧。有如</description>
    </item>
    
    <item>
      <title>宿主程序Crash与Lua是动态库还是静态库有关？</title>
      <link>https://wittonbell.github.io/posts/2009/2009-04-30-%E5%AE%BF%E4%B8%BB%E7%A8%8B%E5%BA%8FCrash%E4%B8%8ELua%E6%98%AF%E5%8A%A8%E6%80%81%E5%BA%93%E8%BF%98%E6%98%AF%E9%9D%99%E6%80%81%E5%BA%93%E6%9C%89%E5%85%B3/</link>
      <pubDate>Thu, 30 Apr 2009 17:48:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2009/2009-04-30-%E5%AE%BF%E4%B8%BB%E7%A8%8B%E5%BA%8FCrash%E4%B8%8ELua%E6%98%AF%E5%8A%A8%E6%80%81%E5%BA%93%E8%BF%98%E6%98%AF%E9%9D%99%E6%80%81%E5%BA%93%E6%9C%89%E5%85%B3/</guid>
      <description>前一阵子在做项目的时候，遇到一个感觉比较怪异的问题：在项目中我们用了Lua作为脚本扩展支持，Lua是以静态库的形式编译进</description>
    </item>
    
    <item>
      <title>跨平台UNICODE编程总结</title>
      <link>https://wittonbell.github.io/posts/2008/2008-06-16-%E8%B7%A8%E5%B9%B3%E5%8F%B0UNICODE%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 16 Jun 2008 13:25:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2008/2008-06-16-%E8%B7%A8%E5%B9%B3%E5%8F%B0UNICODE%E7%BC%96%E7%A8%8B%E6%80%BB%E7%BB%93/</guid>
      <description>这段时间在架构整个服务器，虽然前段时间受到了5.12汶川8.0级大地震的影响（深切悼念在此次大地震中遇难的同胞们），但是</description>
    </item>
    
    <item>
      <title>跨平台Unicode编程的一点问题</title>
      <link>https://wittonbell.github.io/posts/2008/2008-04-24-%E8%B7%A8%E5%B9%B3%E5%8F%B0Unicode%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 24 Apr 2008 17:12:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2008/2008-04-24-%E8%B7%A8%E5%B9%B3%E5%8F%B0Unicode%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E7%82%B9%E9%97%AE%E9%A2%98/</guid>
      <description>最近在做一个跨平台的库，想让这个库支持ANSI和UNICODE，但是在LINUX下不像WINDOWS下有那么多UNICO</description>
    </item>
    
    <item>
      <title>如何用C API遍历Lua脚本中的表</title>
      <link>https://wittonbell.github.io/posts/2007/2007-05-22-%E5%A6%82%E4%BD%95%E7%94%A8C-API%E9%81%8D%E5%8E%86Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%9A%84%E8%A1%A8/</link>
      <pubDate>Tue, 22 May 2007 22:10:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2007/2007-05-22-%E5%A6%82%E4%BD%95%E7%94%A8C-API%E9%81%8D%E5%8E%86Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%9A%84%E8%A1%A8/</guid>
      <description>在刚接触Lua不久，了解了许多理论知识后，就有一种跃跃欲试的冲动，想要自己动手写一段代码来试试。这也许是作为一个程序员所</description>
    </item>
    
    <item>
      <title>C&#43;&#43;类模板的成员函数模板写法</title>
      <link>https://wittonbell.github.io/posts/2007/2007-05-21-C&#43;&#43;%E7%B1%BB%E6%A8%A1%E6%9D%BF%E7%9A%84%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%86%99%E6%B3%95/</link>
      <pubDate>Mon, 21 May 2007 13:04:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2007/2007-05-21-C&#43;&#43;%E7%B1%BB%E6%A8%A1%E6%9D%BF%E7%9A%84%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%86%99%E6%B3%95/</guid>
      <description>这几天本来想将Lua_Tinker移植到Linux上去的，但是由于VC中的模板写法与gcc中的模板写法有些不同之处，比如</description>
    </item>
    
    <item>
      <title>导出C&#43;&#43;中的类到Lua脚本中的经历</title>
      <link>https://wittonbell.github.io/posts/2007/2007-05-18-%E5%AF%BC%E5%87%BAC&#43;&#43;%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%88%B0Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%9A%84%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Fri, 18 May 2007 09:29:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2007/2007-05-18-%E5%AF%BC%E5%87%BAC&#43;&#43;%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%88%B0Lua%E8%84%9A%E6%9C%AC%E4%B8%AD%E7%9A%84%E7%BB%8F%E5%8E%86/</guid>
      <description>这两天一直在研究Lua和LuaPlus。由于项目需要将C++中的类导出到Lua脚本中，让Lua脚本也可以使用C++中的东</description>
    </item>
    
    <item>
      <title>VSLua工具</title>
      <link>https://wittonbell.github.io/posts/2007/2007-05-15-VSLua%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 15 May 2007 20:12:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2007/2007-05-15-VSLua%E5%B7%A5%E5%85%B7/</guid>
      <description>今天在网上找到一些比较好的Lua工具，其中最让人心动的是VSLua，它可以在VS下与C/C++代码一起调试。感觉是一个很</description>
    </item>
    
    <item>
      <title>如何利用VC编写有汇编代码的跨平台代码</title>
      <link>https://wittonbell.github.io/posts/2007/2007-05-12-%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8VC%E7%BC%96%E5%86%99%E6%9C%89%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Sat, 12 May 2007 13:39:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2007/2007-05-12-%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8VC%E7%BC%96%E5%86%99%E6%9C%89%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E4%BB%A3%E7%A0%81/</guid>
      <description>在C/C++中添加内联汇编很容易，只需要用__asm(VC中)或者__asm__(gcc/g++中)关键字就可以在C/C</description>
    </item>
    
    <item>
      <title>跨平台函数指针的写法</title>
      <link>https://wittonbell.github.io/posts/2007/2007-05-11-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E7%9A%84%E5%86%99%E6%B3%95/</link>
      <pubDate>Fri, 11 May 2007 13:05:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2007/2007-05-11-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E7%9A%84%E5%86%99%E6%B3%95/</guid>
      <description>(若转载，请注明原出处与作者，作者：Witton) 前段时间，我在项目中用到了函数指针， 其写法示例如下： 1//Myclass.h 2 3class CMyClass; 4typedef void (CMyClass:: *MyCALLBACK)(); 5</description>
    </item>
    
    <item>
      <title>跨平台宏的写法</title>
      <link>https://wittonbell.github.io/posts/2007/2007-04-30-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%AE%8F%E7%9A%84%E5%86%99%E6%B3%95/</link>
      <pubDate>Mon, 30 Apr 2007 17:50:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2007/2007-04-30-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%AE%8F%E7%9A%84%E5%86%99%E6%B3%95/</guid>
      <description>(若转载，请注明原出处与作者，作者：Witton) 前段时间在写代码的时候，有一段代码发现用宏比较方便，于是就用宏完成了这</description>
    </item>
    
    <item>
      <title>跨平台模板的写法</title>
      <link>https://wittonbell.github.io/posts/2007/2007-04-30-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%86%99%E6%B3%95/</link>
      <pubDate>Mon, 30 Apr 2007 17:10:00 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2007/2007-04-30-%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%86%99%E6%B3%95/</guid>
      <description>(若转载，请注明原出处与作者，作者：Witton) 由于工作的原因，自己写的代码，需要跨平台运行（windows与Linu</description>
    </item>
    
  </channel>
</rss>
