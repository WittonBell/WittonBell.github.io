<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>容器 on Witton的博客</title>
    <link>https://wittonbell.github.io/categories/%E5%AE%B9%E5%99%A8/</link>
    <description>Recent content in 容器 on Witton的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 15 Sep 2023 18:28:34 +0800</lastBuildDate><atom:link href="https://wittonbell.github.io/categories/%E5%AE%B9%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>制作带Go调试器的容器</title>
      <link>https://wittonbell.github.io/posts/2023/2023-09-15-%E5%88%B6%E4%BD%9C%E5%B8%A6Go%E8%B0%83%E8%AF%95%E5%99%A8%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Fri, 15 Sep 2023 18:28:34 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-09-15-%E5%88%B6%E4%BD%9C%E5%B8%A6Go%E8%B0%83%E8%AF%95%E5%99%A8%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>首先创建容器 1sudo podman pull golang:1.21 2sudo podman run -itd --name go-dlv golang:1.21 然后使用命令 1sudo podman exec -it go-dlv /bin/bash 进入容器，在容器内执行下面的命令安装go调试器dlv： 1go env -w GOPROXY=https://goproxy.cn,direct</description>
    </item>
    
    <item>
      <title>容器中的nginx暴露一个端口部署多个功能的网站</title>
      <link>https://wittonbell.github.io/posts/2023/2023-09-15-%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84nginx%E6%9A%B4%E9%9C%B2%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E5%8A%9F%E8%83%BD%E7%9A%84%E7%BD%91%E7%AB%99/</link>
      <pubDate>Fri, 15 Sep 2023 15:33:18 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-09-15-%E5%AE%B9%E5%99%A8%E4%B8%AD%E7%9A%84nginx%E6%9A%B4%E9%9C%B2%E4%B8%80%E4%B8%AA%E7%AB%AF%E5%8F%A3%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AA%E5%8A%9F%E8%83%BD%E7%9A%84%E7%BD%91%E7%AB%99/</guid>
      <description>随着容器的应用越来越多，将nginx部署在容器中也是常有之事。可能事先创建容器时只暴露了一个端口给浏览器连接，后面又想根</description>
    </item>
    
    <item>
      <title>使用docker-compose命令行向远程主机编排容器</title>
      <link>https://wittonbell.github.io/posts/2023/2023-09-14-%E4%BD%BF%E7%94%A8docker-compose%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%91%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E7%BC%96%E6%8E%92%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Thu, 14 Sep 2023 15:59:48 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-09-14-%E4%BD%BF%E7%94%A8docker-compose%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%91%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E7%BC%96%E6%8E%92%E5%AE%B9%E5%99%A8/</guid>
      <description>在使用Goland的时候，可以直接使用它集成的功能来向远程主机部署容器，但是如果直接使用命令行的方式该如何操作？查看he</description>
    </item>
    
    <item>
      <title>解决Error validating CNI config file:[plugin bridge does not support config version “1.0.0“]</title>
      <link>https://wittonbell.github.io/posts/2023/2023-09-14-%E8%A7%A3%E5%86%B3Error-validating-CNI-config-fileplugin-bridge-does-not-support-config-version-1.0.0/</link>
      <pubDate>Thu, 14 Sep 2023 11:56:48 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-09-14-%E8%A7%A3%E5%86%B3Error-validating-CNI-config-fileplugin-bridge-does-not-support-config-version-1.0.0/</guid>
      <description>之前在使用podman容器时都一切正常，可以在Windows下使用Goland的Docker工具直接部署容器到远程Lin</description>
    </item>
    
    <item>
      <title>解决nexus3登录x509: certificate has expired or is not yet valid</title>
      <link>https://wittonbell.github.io/posts/2023/2023-09-12-%E8%A7%A3%E5%86%B3nexus3%E7%99%BB%E5%BD%95x509-certificate-has-expired-or-is-not-yet-valid/</link>
      <pubDate>Tue, 12 Sep 2023 12:01:01 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-09-12-%E8%A7%A3%E5%86%B3nexus3%E7%99%BB%E5%BD%95x509-certificate-has-expired-or-is-not-yet-valid/</guid>
      <description>笔者前面的博文 使用nexus3作为Docker镜像仓库介绍了如何使用nexus3来作为容器的镜像仓库，在生成证书时，使用</description>
    </item>
    
    <item>
      <title>记Gitlab备份与设置自动备份</title>
      <link>https://wittonbell.github.io/posts/2023/2023-06-13-%E8%AE%B0Gitlab%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/</link>
      <pubDate>Tue, 13 Jun 2023 15:58:43 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-06-13-%E8%AE%B0Gitlab%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/</guid>
      <description>今天给Gitlab做了一个备份，并且设置了每天自动备份，记录一下。 一、导出全部项目 由于Gitlab Web页面并没有自动备</description>
    </item>
    
    <item>
      <title>处理podman的overlay-containers中ctr.log日志文件过大的问题</title>
      <link>https://wittonbell.github.io/posts/2023/2023-06-08-%E5%A4%84%E7%90%86podman%E7%9A%84overlay-containers%E4%B8%ADctr.log%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 08 Jun 2023 11:08:11 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-06-08-%E5%A4%84%E7%90%86podman%E7%9A%84overlay-containers%E4%B8%ADctr.log%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>公司服务器的一些软件使用了容器技术，比如Podman、Docker，从架设到现在已经稳定运行了1年半了，半年前发现磁盘占</description>
    </item>
    
    <item>
      <title>搭建ubuntu容器内C/C&#43;&#43;开发调试环境</title>
      <link>https://wittonbell.github.io/posts/2023/2023-06-05-%E6%90%AD%E5%BB%BAubuntu%E5%AE%B9%E5%99%A8%E5%86%85C_C&#43;&#43;%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 05 Jun 2023 17:10:30 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-06-05-%E6%90%AD%E5%BB%BAubuntu%E5%AE%B9%E5%99%A8%E5%86%85C_C&#43;&#43;%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid>
      <description>一、创建容器 为了让容器内的调试器（gdb、lldb）能够正常调试，在创建容器时需要添加参数： podman添加参数：--c</description>
    </item>
    
    <item>
      <title>改变podman的存储路径</title>
      <link>https://wittonbell.github.io/posts/2022/2022-12-30-%E6%94%B9%E5%8F%98podman%E7%9A%84%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84/</link>
      <pubDate>Fri, 30 Dec 2022 17:51:05 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2022/2022-12-30-%E6%94%B9%E5%8F%98podman%E7%9A%84%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84/</guid>
      <description>使用podman容器时，podman会默认使用/var/lib/containers路径作为存储路径，可能会导致根磁盘空</description>
    </item>
    
    <item>
      <title>WordPress使用markdown格式发布内容</title>
      <link>https://wittonbell.github.io/posts/2022/2022-05-23-WordPress%E4%BD%BF%E7%94%A8markdown%E6%A0%BC%E5%BC%8F%E5%8F%91%E5%B8%83%E5%86%85%E5%AE%B9/</link>
      <pubDate>Mon, 23 May 2022 21:53:33 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2022/2022-05-23-WordPress%E4%BD%BF%E7%94%A8markdown%E6%A0%BC%E5%BC%8F%E5%8F%91%E5%B8%83%E5%86%85%E5%AE%B9/</guid>
      <description>markdown是目前网络上比较流行的文档格式，前一篇博文 容器中搭建WordPress中介绍了在容器中如何搭建WordP</description>
    </item>
    
    <item>
      <title>容器中搭建WordPress</title>
      <link>https://wittonbell.github.io/posts/2022/2022-05-21-%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%90%AD%E5%BB%BAWordPress/</link>
      <pubDate>Sat, 21 May 2022 11:15:16 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2022/2022-05-21-%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%90%AD%E5%BB%BAWordPress/</guid>
      <description>WordPress是一个非常流行的网站、博客内容管理系统，很网站都是使用它来创建的内容。本文记录笔者在容器中搭建Word</description>
    </item>
    
    <item>
      <title>nginx文件服务器美化autoindex显示</title>
      <link>https://wittonbell.github.io/posts/2022/2022-05-15-nginx%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BE%8E%E5%8C%96autoindex%E6%98%BE%E7%A4%BA/</link>
      <pubDate>Sun, 15 May 2022 20:48:37 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2022/2022-05-15-nginx%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BE%8E%E5%8C%96autoindex%E6%98%BE%E7%A4%BA/</guid>
      <description>网络上很多使用nginx来作为文件服务器的，前段时间公司也有这个需求，就研究了一下使用nginx来做文件服务器，参见前面</description>
    </item>
    
    <item>
      <title>容器中使用nginx并搭建sftp服务</title>
      <link>https://wittonbell.github.io/posts/2022/2022-05-13-%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8nginx%E5%B9%B6%E6%90%AD%E5%BB%BAsftp%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Fri, 13 May 2022 14:52:57 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2022/2022-05-13-%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8nginx%E5%B9%B6%E6%90%AD%E5%BB%BAsftp%E6%9C%8D%E5%8A%A1/</guid>
      <description>文章目录 一、下载并安装最新的nginx容器 二、设置系统 1.设置更新源 2.更新 3.设置本地时区 三、准备sftp账号 1.添加</description>
    </item>
    
    <item>
      <title>容器中使用ngnix搭建支持上传下载的文件服务器</title>
      <link>https://wittonbell.github.io/posts/2022/2022-05-10-%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8ngnix%E6%90%AD%E5%BB%BA%E6%94%AF%E6%8C%81%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Tue, 10 May 2022 16:29:14 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2022/2022-05-10-%E5%AE%B9%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8ngnix%E6%90%AD%E5%BB%BA%E6%94%AF%E6%8C%81%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>文章目录 一、安装nginx容器 二、配置nginx 三、支持文件上传 1. 配置nginx 2. 添加upload.html 3. 添加后端处</description>
    </item>
    
    <item>
      <title>使用容器编排对go项目进行部署、调试</title>
      <link>https://wittonbell.github.io/posts/2022/2022-01-11-%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E5%AF%B9go%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2%E8%B0%83%E8%AF%95/</link>
      <pubDate>Tue, 11 Jan 2022 18:03:29 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2022/2022-01-11-%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E5%AF%B9go%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8C%E9%83%A8%E7%BD%B2%E8%B0%83%E8%AF%95/</guid>
      <description>文章目录 一、环境配置 二、部署 1、编写Dockerfile 2、编写容器编排文件 3、设置Goland部署配置 4、执行部署 三、</description>
    </item>
    
    <item>
      <title>解决 podman: failed to create new watcher too many open files</title>
      <link>https://wittonbell.github.io/posts/2021/2021-12-28-%E8%A7%A3%E5%86%B3-podman-failed-to-create-new-watcher-too-many-open-files/</link>
      <pubDate>Tue, 28 Dec 2021 16:07:09 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-12-28-%E8%A7%A3%E5%86%B3-podman-failed-to-create-new-watcher-too-many-open-files/</guid>
      <description>今天在服务中部署容器时，出现错误： 1Error: error configuring CNI network plugin: failed to create new watcher too many open files 通过： 1cat /proc/sys/fs/inotify/max_user_instances 2cat /proc/sys/fs/inotify/max_user_watches 查看结果为： 1fs.inotify.max_user_instances = 128 2fs.inotify.max_user_watches = 264039 max_user_</description>
    </item>
    
    <item>
      <title>ubuntu安装podman-compose</title>
      <link>https://wittonbell.github.io/posts/2021/2021-12-28-ubuntu%E5%AE%89%E8%A3%85podman-compose/</link>
      <pubDate>Tue, 28 Dec 2021 11:46:32 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-12-28-ubuntu%E5%AE%89%E8%A3%85podman-compose/</guid>
      <description>用过docker-compose的一定不会对podman-compose陌生，podman作为docker的替代品，自然</description>
    </item>
    
    <item>
      <title>Goland连接https的Docker远程服务</title>
      <link>https://wittonbell.github.io/posts/2021/2021-12-23-Goland%E8%BF%9E%E6%8E%A5https%E7%9A%84Docker%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Thu, 23 Dec 2021 18:31:25 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-12-23-Goland%E8%BF%9E%E6%8E%A5https%E7%9A%84Docker%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1/</guid>
      <description>在前文 Goland使用远程容器进行go开发调试中介绍到为了让Goland能够远程调试Docker容器中的代码，需要在Do</description>
    </item>
    
    <item>
      <title>Goland使用远程容器进行go开发调试</title>
      <link>https://wittonbell.github.io/posts/2021/2021-12-21-Goland%E4%BD%BF%E7%94%A8%E8%BF%9C%E7%A8%8B%E5%AE%B9%E5%99%A8%E8%BF%9B%E8%A1%8Cgo%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95/</link>
      <pubDate>Tue, 21 Dec 2021 15:53:15 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-12-21-Goland%E4%BD%BF%E7%94%A8%E8%BF%9C%E7%A8%8B%E5%AE%B9%E5%99%A8%E8%BF%9B%E8%A1%8Cgo%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95/</guid>
      <description>文章目录 一、安装远程容器 二、安装与配置容器仓库 1.安装与配置 2.安装证书 三、准备项目 四、运行 1.开启容器远程服务 2.添加</description>
    </item>
    
    <item>
      <title>使用nexus3作为Docker镜像仓库</title>
      <link>https://wittonbell.github.io/posts/2021/2021-12-16-%E4%BD%BF%E7%94%A8nexus3%E4%BD%9C%E4%B8%BADocker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</link>
      <pubDate>Thu, 16 Dec 2021 18:17:25 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-12-16-%E4%BD%BF%E7%94%A8nexus3%E4%BD%9C%E4%B8%BADocker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/</guid>
      <description>文章目录 一、在容器中安装运行nexus3 二、创建Docker镜像仓库 三、修改配置文件 四、配置权限 1.配置Realms权限</description>
    </item>
    
    <item>
      <title>使用podman容器配置gitlab</title>
      <link>https://wittonbell.github.io/posts/2021/2021-11-30-%E4%BD%BF%E7%94%A8podman%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AEgitlab/</link>
      <pubDate>Tue, 30 Nov 2021 11:11:41 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-11-30-%E4%BD%BF%E7%94%A8podman%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AEgitlab/</guid>
      <description>文章目录 一、下载gitlab以及gitlab-runner镜像 二、运行容器与配置gitlab 1、运行gitlab容器 2、</description>
    </item>
    
    <item>
      <title>搭建容器的私有库</title>
      <link>https://wittonbell.github.io/posts/2021/2021-11-26-%E6%90%AD%E5%BB%BA%E5%AE%B9%E5%99%A8%E7%9A%84%E7%A7%81%E6%9C%89%E5%BA%93/</link>
      <pubDate>Fri, 26 Nov 2021 16:16:06 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-11-26-%E6%90%AD%E5%BB%BA%E5%AE%B9%E5%99%A8%E7%9A%84%E7%A7%81%E6%9C%89%E5%BA%93/</guid>
      <description>文章目录 一、拉取registry容器 1、使用cockpit来拉取 2、使用命令拉取 3、生成密码： 二、 运行registry镜</description>
    </item>
    
    <item>
      <title>开机自动运行容器</title>
      <link>https://wittonbell.github.io/posts/2021/2021-11-25-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Thu, 25 Nov 2021 11:11:31 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-11-25-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8/</guid>
      <description>文章目录 一、创建容器 二、创建服务 三、设置开机自动启动 四、测试服务 五、开机测试 六、测试容器运行中情况下，重启主机 七、使用容</description>
    </item>
    
    <item>
      <title>CentOS 8使用Cockpit管理Linux——podman容器</title>
      <link>https://wittonbell.github.io/posts/2021/2021-09-07-CentOS-8%E4%BD%BF%E7%94%A8Cockpit%E7%AE%A1%E7%90%86Linuxpodman%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Tue, 07 Sep 2021 22:31:33 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-09-07-CentOS-8%E4%BD%BF%E7%94%A8Cockpit%E7%AE%A1%E7%90%86Linuxpodman%E5%AE%B9%E5%99%A8/</guid>
      <description>文章目录 一、查看podman容器 二、拉取镜像 三、配置镜像实例 CentOS 8使用Cockpit管理Linux系列文章列表： CentOS 8使用C</description>
    </item>
    
    <item>
      <title>CentOS 6.10不升级内核安装Docker</title>
      <link>https://wittonbell.github.io/posts/2021/2021-08-15-CentOS-6.10%E4%B8%8D%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8%E5%AE%89%E8%A3%85Docker/</link>
      <pubDate>Sun, 15 Aug 2021 11:56:10 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2021/2021-08-15-CentOS-6.10%E4%B8%8D%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8%E5%AE%89%E8%A3%85Docker/</guid>
      <description>目前Docker新版本docker-ce官宣支持的CentOS系统为7及以上系统，CentOS 6.X由于内核版本太低，为</description>
    </item>
    
    <item>
      <title>CentOS8下超详细安装配置kubernetes（K8S）</title>
      <link>https://wittonbell.github.io/posts/2020/2020-07-02-CentOS8%E4%B8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEkubernetesK8S/</link>
      <pubDate>Thu, 02 Jul 2020 18:09:22 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2020/2020-07-02-CentOS8%E4%B8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEkubernetesK8S/</guid>
      <description>文章目录 一、环境准备 1. 卸载podman 2. 关闭交换区 3. 禁用selinux 4. 关闭防火墙 二、安装K8S 1. 配置系统基本安装源 2. 添</description>
    </item>
    
    <item>
      <title>修改已有Docker的端口映射</title>
      <link>https://wittonbell.github.io/posts/2020/2020-06-05-%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%9C%89Docker%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</link>
      <pubDate>Fri, 05 Jun 2020 16:05:49 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2020/2020-06-05-%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%9C%89Docker%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/</guid>
      <description>文章目录 1. 关闭容器 2. 停止容器服务 3. 修改配置文件 4. 启动容器服务 5. 启动容器 在创建Docker容器时，我们可以使用-p或者-P</description>
    </item>
    
    <item>
      <title>Docker Bridge网络模式下解析DNS问题</title>
      <link>https://wittonbell.github.io/posts/2020/2020-06-01-Docker-Bridge%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%A7%A3%E6%9E%90DNS%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jun 2020 17:24:08 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2020/2020-06-01-Docker-Bridge%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E4%B8%8B%E8%A7%A3%E6%9E%90DNS%E9%97%AE%E9%A2%98/</guid>
      <description>Docker的网络模式有Bridge(桥接)模式，host(主机)模式，overlay模式等等，参见 https://do</description>
    </item>
    
  </channel>
</rss>
