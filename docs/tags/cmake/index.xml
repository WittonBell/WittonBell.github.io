<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cmake on Witton的博客</title>
    <link>https://wittonbell.github.io/tags/cmake/</link>
    <description>Recent content in cmake on Witton的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 21 Aug 2023 14:40:47 +0800</lastBuildDate><atom:link href="https://wittonbell.github.io/tags/cmake/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VS2022解决Protobuf compiler version 23.4 doesn‘t match library version 4.23.4</title>
      <link>https://wittonbell.github.io/posts/2023/2023-08-21-VS2022%E8%A7%A3%E5%86%B3Protobuf-compiler-version-23.4-doesnt-match-library-version-4.23.4/</link>
      <pubDate>Mon, 21 Aug 2023 14:40:47 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-08-21-VS2022%E8%A7%A3%E5%86%B3Protobuf-compiler-version-23.4-doesnt-match-library-version-4.23.4/</guid>
      <description>在使用Visual Studio 2022+MinGW+CMake作为开发环境时，如果项目中使用了Protobuf，则在CMake运行</description>
    </item>
    
    <item>
      <title>Visual Studio 2022 CMake&#43;MinGW&#43;GDB 调试目标程序</title>
      <link>https://wittonbell.github.io/posts/2023/2023-05-14-Visual-Studio-2022-CMake&#43;MinGW&#43;GDB-%E8%B0%83%E8%AF%95%E7%9B%AE%E6%A0%87%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sun, 14 May 2023 23:51:11 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-05-14-Visual-Studio-2022-CMake&#43;MinGW&#43;GDB-%E8%B0%83%E8%AF%95%E7%9B%AE%E6%A0%87%E7%A8%8B%E5%BA%8F/</guid>
      <description>前段时间笔者在使用MinGW编译了QtCreator后，想要进行调试。最开始使用VSCode进行调试，可是可以调试，但是</description>
    </item>
    
    <item>
      <title>CMake自动按目录结构编译Protobuf代码</title>
      <link>https://wittonbell.github.io/posts/2023/2023-04-26-CMake%E8%87%AA%E5%8A%A8%E6%8C%89%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%BC%96%E8%AF%91Protobuf%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 26 Apr 2023 17:49:55 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-04-26-CMake%E8%87%AA%E5%8A%A8%E6%8C%89%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%BC%96%E8%AF%91Protobuf%E4%BB%A3%E7%A0%81/</guid>
      <description>在使用CMake构建C++项目时，如果有使用Protobuf，CMake提供了一个FindProtobuf.cmake模</description>
    </item>
    
    <item>
      <title>使用Glib中测试框架对C代码进行单元测试</title>
      <link>https://wittonbell.github.io/posts/2023/2023-04-21-%E4%BD%BF%E7%94%A8Glib%E4%B8%AD%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E5%AF%B9C%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Fri, 21 Apr 2023 18:26:27 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-04-21-%E4%BD%BF%E7%94%A8Glib%E4%B8%AD%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E5%AF%B9C%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>C++项目的测试框架比较常见的是Google的gtest（前文 CMake项目使用ctest+gtest进行单元测试有使用</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43;开发中使用pkg-config来引用依赖库</title>
      <link>https://wittonbell.github.io/posts/2023/2023-04-20-C_C&#43;&#43;%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BD%BF%E7%94%A8pkg-config%E6%9D%A5%E5%BC%95%E7%94%A8%E4%BE%9D%E8%B5%96%E5%BA%93/</link>
      <pubDate>Thu, 20 Apr 2023 18:49:49 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-04-20-C_C&#43;&#43;%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BD%BF%E7%94%A8pkg-config%E6%9D%A5%E5%BC%95%E7%94%A8%E4%BE%9D%E8%B5%96%E5%BA%93/</guid>
      <description>在使用C/C++进行开发的过程中，经常需要引用其它的库，可能是系统已经安装好的，也可能是其它的外部库。 如果是系统支持的库</description>
    </item>
    
    <item>
      <title>使用CMake的CPack工具打包项目</title>
      <link>https://wittonbell.github.io/posts/2023/2023-04-18-%E4%BD%BF%E7%94%A8CMake%E7%9A%84CPack%E5%B7%A5%E5%85%B7%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Tue, 18 Apr 2023 12:04:50 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-04-18-%E4%BD%BF%E7%94%A8CMake%E7%9A%84CPack%E5%B7%A5%E5%85%B7%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/</guid>
      <description>为了介绍如何使用CMake的CPack工具进行项目打包，这里使用了前文 CMake项目使用ctest+gtest进行单元测</description>
    </item>
    
    <item>
      <title>CMake项目使用ctest&#43;gtest进行单元测试</title>
      <link>https://wittonbell.github.io/posts/2023/2023-04-15-CMake%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8ctest&#43;gtest%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sat, 15 Apr 2023 17:12:17 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2023/2023-04-15-CMake%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8ctest&#43;gtest%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>随着CMake工具越来越强大便捷，越来越多的C/C++项目转而使用CMake来进行编译管理，它还提供了用于测试的ctes</description>
    </item>
    
    <item>
      <title>Visual Studio 2022使用MinGW来编译调试C/C&#43;&#43;程序</title>
      <link>https://wittonbell.github.io/posts/2022/2022-08-07-Visual-Studio-2022%E4%BD%BF%E7%94%A8MinGW%E6%9D%A5%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95C_C&#43;&#43;%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sun, 07 Aug 2022 17:23:16 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2022/2022-08-07-Visual-Studio-2022%E4%BD%BF%E7%94%A8MinGW%E6%9D%A5%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95C_C&#43;&#43;%E7%A8%8B%E5%BA%8F/</guid>
      <description>文章目录 一、创建项目 二、配置CMake 1.修改“CMakePresets.json”预设编译工具集 2.使用CMake设置</description>
    </item>
    
    <item>
      <title>Linux下使用CMake构建含nasm汇编的C/C&#43;&#43;项目</title>
      <link>https://wittonbell.github.io/posts/2022/2022-05-29-Linux%E4%B8%8B%E4%BD%BF%E7%94%A8CMake%E6%9E%84%E5%BB%BA%E5%90%ABnasm%E6%B1%87%E7%BC%96%E7%9A%84C_C&#43;&#43;%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sun, 29 May 2022 00:24:09 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2022/2022-05-29-Linux%E4%B8%8B%E4%BD%BF%E7%94%A8CMake%E6%9E%84%E5%BB%BA%E5%90%ABnasm%E6%B1%87%E7%BC%96%E7%9A%84C_C&#43;&#43;%E9%A1%B9%E7%9B%AE/</guid>
      <description>CMake的出现极大的方便了C/C++项目的编译管理，避免了手工写Makefile的繁琐。如果在C/C++项目中有需要使</description>
    </item>
    
    <item>
      <title>Windows下开发Linux C/C&#43;&#43;项目</title>
      <link>https://wittonbell.github.io/posts/2019/2019-06-04-Windows%E4%B8%8B%E5%BC%80%E5%8F%91Linux-C_C&#43;&#43;%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Tue, 04 Jun 2019 17:50:12 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2019/2019-06-04-Windows%E4%B8%8B%E5%BC%80%E5%8F%91Linux-C_C&#43;&#43;%E9%A1%B9%E7%9B%AE/</guid>
      <description>一、Windows编辑、编译、调试、运行，最终在Linux下编译、运行 这是常规方法，以前我做的几个项目都是在Window</description>
    </item>
    
    <item>
      <title>CentOS 6.X安装GCC 9.1和LLVM/Clang 8.0</title>
      <link>https://wittonbell.github.io/posts/2019/2019-05-19-CentOS-6.X%E5%AE%89%E8%A3%85GCC-9.1%E5%92%8CLLVM_Clang-8.0/</link>
      <pubDate>Sun, 19 May 2019 23:24:23 +0800</pubDate>
      
      <guid>https://wittonbell.github.io/posts/2019/2019-05-19-CentOS-6.X%E5%AE%89%E8%A3%85GCC-9.1%E5%92%8CLLVM_Clang-8.0/</guid>
      <description>在Cent OS 6.X中要安装Clang 8.0必须要使用GCC 4.8及以上版本才能编译，但系统自带的是4.4.7版本的，看了</description>
    </item>
    
  </channel>
</rss>
